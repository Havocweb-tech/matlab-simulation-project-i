% Create a function to initialize and display the GUI
function wheelchair_hmi()
    %add the path power system ...
    addpath('MATLAB_codes/power system/');
    addpath('MATLAB_codes/Actuation/');

    % Initialize Bluetooth server for receiving commands from G.M.I
    % bluetoothServer = BluetoothServer();  % Define this class to handle Bluetooth communication
    

    % Create a figure
    fig = figure('Name', 'Wheelchair H.M.I', 'Position', [50, 50, 360, 600], 'NumberTitle', 'off', 'MenuBar', 'none');
    
    % Set the background color to dark
    % darkBackgroundColor = [0.1, 0.1, 0.1];
    % set(fig, 'Color', darkBackgroundColor);
    % battery figures
    batteryback = uicontrol('Style', 'text', 'String', '', 'Position', [20, 552, 55, 15], 'HandleVisibility', 'on', 'Tag', 'myMessageLabel', 'BackgroundColor', 'black', 'FontSize', 10, 'FontWeight', 'bold', 'ForegroundColor', 'blue');
    batterybacki = uicontrol('Style', 'text', 'String', '', 'Position', [20, 550, 50, 20], 'HandleVisibility', 'on', 'Tag', 'myMessageLabel', 'BackgroundColor', 'black', 'FontSize', 10, 'FontWeight', 'bold', 'ForegroundColor', 'blue');
    
    % power system generation
    powersection  = uicontrol('Style', 'text', 'String', 'Battery Current Capacity: Unknown', 'Position', [70, 552, 100, 30], 'ForegroundColor', 'black');
    powersectioni = uicontrol('Style', 'text', 'String', 'Battery Inni')
    % declare a whole new set of colors;
    darkButtonColor = [0.2, 0.2, 0.2]; % Slightly lighter than the background
    redButtonColor = [1, 0, 0]; % red border color


    % Load your image (change 'upviewant.png' to the actual image file path)
imageData = imread('MATLAB_codes/assets/upviewant.png');

% Calculate the position to center the image in the GUI
imageWidth = size(imageData, 2);
imageHeight = size(imageData, 1);
guiWidth = 360;  % Set the width of your GUI
guiHeight = 600;  % Set the height of your GUI
xPosition = (guiWidth - imageWidth) / 2;
yPosition = (guiHeight - imageHeight) / 2;

% Create an 'axes' component to display the image
axes('Position', [xPosition, yPosition, imageWidth, imageHeight]);
imshow(imageData);
axis off;  % Turn off axis labels and ticks if needed


    % Display the image in the 'axes' component (change 'axes1' to match your axes tag or name)
    % axes(handles.axes1);  % Use 'handles.axes1' if you're using GUIDE; otherwise, use the appropriate handle
    % imshow(imageData);     % Display the image
    % axis off;              % Turn off axis labels and ticks if needed



    % Load icon images
    upIcon = imread('MATLAB_codes/assets/forward.png');
    downIcon = imread('MATLAB_codes/assets/back.png');
    leftIcon = imread('MATLAB_codes/assets/left.png');
    rightIcon = imread('MATLAB_codes/assets/right.png');
    StopIcon = imread('MATLAB_codes/assets/stop.png');

    % Convert the image to double precision and scale it to [0, 1]
    im_sized = imresize(upIcon,[20,20]);
    
    % Create buttons for controlling the wheelchair
    btnForward = uicontrol('Style', 'pushbutton', 'String', 'F', 'Position', [150, 210, 50, 50], 'FontWeight','bold', 'Callback', @forwardCallback);
    btnBackward = uicontrol('Style', 'pushbutton', 'String', 'B', 'Position', [150, 90, 50, 50], 'FontWeight','bold', 'Callback', @backwardCallback);
    btnLeft = uicontrol('Style', 'pushbutton', 'String', 'L', 'Position', [80, 150, 50, 50], 'FontWeight','bold', 'Callback', @LeftCallback);
    btnRight = uicontrol('Style', 'pushbutton', 'String', 'R', 'Position', [220, 150, 50, 50], 'FontWeight','bold', 'Callback', @RightCallback);
    btnStop = uicontrol('Style', 'pushbutton', 'String', 'X', 'Position', [150, 150, 50, 50], 'FontWeight','bold', 'Callback', @stopCallback);
    

    % set(btnForward,'CData',im_sized);
    
    
    
    
    % Calculate the screen width
    screenWidth = get(0, 'ScreenSize');
    labelWidth = 350;  % Set the desired width for the label
    labelHeight = 30;  % Set the desired height for the label

    % Calculate the x-coordinate for centering the label horizontally
    xPosition = (screenWidth(3) - labelWidth) / 2;

    % Create a text label for the other warning message...
    
    messageLabeli = uicontrol('Style', 'text', 'String', 'Device Is Not Moving ...', 'Position', [25, 460, labelWidth, labelHeight], 'HandleVisibility', 'on', 'Tag', 'myMessageLabel', 'BackgroundColor', darkButtonColor, 'FontSize', 10, 'FontWeight', 'bold', 'ForegroundColor', 'blue');


    % Create a text label to display battery status
    % batteryLabel = uicontrol('Style', 'text', 'String', 'Battery Status: Unknown', 'Position', [20, 10, 150, 30]);
    
    % Function for batterylabel ...
    DevicePercent = wheelchair_powerSystem();
    disp(DevicePercent);
    CheckLowPower = detectLowPower(DevicePercent);
    disp(CheckLowPower);
    % Define a function to update the battery status
    % Define a function to update the battery status
function updateBatteryStatus(messageLabel, batteryLabel, DevicePercent, CheckLowPower)
    if strcmp(CheckLowPower, 'okay')
        % Update the battery status display in the uicontrol
        set(batteryLabel, 'String', DevicePercent, 'ForegroundColor', 'black', 'BackgroundColor', 'green');
    else
        set(messageLabel, 'String', 'Device Is Low And May Not Function properly', 'ForegroundColor', 'red');
        set(batteryLabel, 'String', DevicePercent, 'ForegroundColor', 'black');
    end
end
    % Create a text label for displaying messages at the bottom center of the screen
    messageLabel = uicontrol('Style', 'text', 'String', '', 'Position', [25, 500, labelWidth, labelHeight], 'HandleVisibility', 'on', 'Tag', 'myMessageLabel', 'BackgroundColor', darkButtonColor, 'FontSize', 10, 'FontWeight', 'bold');
    
    
% Create the uicontrol for displaying battery status
batteryLabel = uicontrol('Style', 'text', 'String', '?', 'Position', [22, 552, 45, 16], 'FontWeight','bold');

% Call the function to update the battery status
updateBatteryStatus(messageLabel, batteryLabel, DevicePercent, CheckLowPower);

% Define the time interval in seconds (e.g., 5 seconds)
timeInterval = 10;
direction = 'none';
isMoving = false;
% Create an infinite loop
while true
    % Call your function here
    result = wheelchair_actuation(DevicePercent, isMoving);  % Replace 'yourFunction()' with your actual function call
    
    if strcmp(result, 'low power')
        direction = 'none';
        isMoving = false;
        set(messageLabeli, 'String', 'Low Battery, Please Charge');
    else
        if strcmp(result, 'detected')
            direction = 'none';
            isMoving = false;
            set(messageLabeli, 'String', 'Obstacle Detected, try again.');
        else
            isMoving = true;
        end
        
    end
    % Display the result or perform other tasks
    
    % Pause for the specified time interval
    pause(timeInterval);
end

    
    
    % Function to handle the "Forward" button click
    function forwardCallback(~, ~)
        newPower = PowerUsage(DevicePercent);
        DevicePercent = newPower;
        newPowerAlert = detectLowPower(DevicePercent);
        updateBatteryStatus(messageLabel, batteryLabel, DevicePercent, newPowerAlert);

        movement = moveForward(newPower, direction);
        if strcmp(movement, 'low power')
            direction = 'none';
            set(messageLabeli, 'String', 'Low Battery, Please Charge');
        else
            isMoving = true;
        if strcmp(movement, 'Already Going Forward')
            direction = movement;
            set(messageLabeli, 'String', sprintf('Similar Action...: %s', movement));
        else
            direction = movement;
            set(messageLabeli, 'String', sprintf('Device Is Moving...: %s', movement));
        end
        end
    end

    % Function to handle the "Backward" button click
    function backwardCallback(~, ~)
        newPower = PowerUsage(DevicePercent);
        DevicePercent = newPower;
        newPowerAlert = detectLowPower(DevicePercent);
        updateBatteryStatus(messageLabel, batteryLabel, DevicePercent, newPowerAlert);
        movement = moveBackward(newPower, direction);
        if strcmp(movement, 'low power')
            direction = 'none';
            set(messageLabeli, 'String', 'Low Battery, Please Charge');
        else
            isMoving = true;

        if strcmp(movement, 'Already Going Backward')
            direction = movement;
            set(messageLabeli, 'String', sprintf('Similar Action...: %s', movement));
        else
            direction = movement;
            set(messageLabeli, 'String', sprintf('Device Is Moving...: %s', movement));
        end
        end
    end

    % Function to handle the "Stop" button click
    function stopCallback(~, ~)
        
        if strcmp(direction, 'none')
            isMoving = false;
        else
            isMoving = true;
        end
        movement = Stop(isMoving);
        if strcmp(movement, 'unnecess')
            direction = 'none';
            isMoving = false;
            set(messageLabeli, 'String', 'Device Is Not Moving ...');
        else
            direction = 'none';
            isMoving = false;
            set(messageLabeli, 'String', 'Device Has Stopped');
        end
    end
    function LeftCallback(~, ~)
        newPower = PowerUsage(DevicePercent);
        DevicePercent = newPower;
        newPowerAlert = detectLowPower(DevicePercent);
        updateBatteryStatus(messageLabel, batteryLabel, DevicePercent, newPowerAlert);
        movement = moveLeft(newPower, direction);
        if strcmp(movement, 'low power')
            direction = 'none';
            set(messageLabeli, 'String', 'Low Battery, Please Charge');
        else
            isMoving = true;

        if strcmp(movement, 'Already Going Left')
            direction = movement;
            set(messageLabeli, 'String', sprintf('Similar Action...: %s', movement));
        else
            direction = movement;
            set(messageLabeli, 'String', sprintf('Device Is Moving...: %s', movement));
        end
        end

    end
    function RightCallback(~, ~)
        newPower = PowerUsage(DevicePercent);
        DevicePercent = newPower;
        newPowerAlert = detectLowPower(DevicePercent);
        updateBatteryStatus(messageLabel, batteryLabel, DevicePercent, newPowerAlert);
        movement = moveRight(newPower, direction);
        if strcmp(movement, 'low power')
            direction = 'none';
            set(messageLabeli, 'String', 'Low Battery, Please Charge');
        else
            isMoving = true;

        if strcmp(movement, 'Already Going Right')
            direction = movement;
            set(messageLabeli, 'String', sprintf('Similar Action...: %s', movement));
        else
            direction = movement;
            set(messageLabeli, 'String', sprintf('Device Is Moving...: %s', movement));
        end
        end
    end
end
